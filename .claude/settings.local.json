{
  "permissions": {
    "allow": [
      "Bash(git :*)",
      "Bash(uv :*)",
      "Bash(npm :*)",
      "Bash(npx :*)",
      "Bash(yarn :*)",
      "Bash(pnpm :*)",
      "Bash(pip :*)",
      "Bash(node :*)",
      "Bash(python :*)",
      "Bash(tsc :*)",
      "Bash(tsx :*)",
      "Bash(next :*)",
      "Bash(timeout :*)",
      "Bash(curl :*)",
      "Bash(cp :*)",
      "Bash(mv :*)",
      "Bash(rm :*)",
      "Bash(mkdir :*)",
      "Bash(chmod :*)",
      "Bash(touch :*)",
      "Bash(cat :*)",
      "Bash(ls :*)",
      "Bash(find :*)",
      "Bash(grep :*)",
      "Bash(sed :*)",
      "Bash(awk :*)",
      "Bash(echo :*)",
      "Bash(kill :*)",
      "Bash(pkill :*)",
      "Bash(ps :*)",
      "Bash(for :*)",
      "Bash(while :*)",
      "Bash(if :*)",
      "Bash(do :*)",
      "Bash(done :*)",
      "Bash(then :*)",
      "Bash(else :*)",
      "Bash(fi :*)",
      "Bash(env)",
      "Bash(echo $?)",
      "Bash(/dev/null)",
      "Bash(true)",
      "Bash(false)",
      "Bash(/init)",
      "Bash(time npm run build)",
      "Bash(npm --version)",
      "Bash(SKIP_ENV_VALIDATION=true npm run build)",
      "Bash(claude mcp :*)",
      "Bash(markdownlint :*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__ide__getDiagnostics",
      "mcp__ide__executeCode",
      "mcp__filesystem__list_allowed_directories",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__read_text_file",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__write_file",
      "mcp__filesystem__get_file_info",
      "mcp__filesystem__search_files",
      "mcp__github__search_repositories",
      "mcp__github__search_code",
      "WebSearch",
      "WebFetch(domain:*)",
      "Bash(python3:*)",
      "Bash(claude mcp)",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__move_file",
      "mcp__filesystem__edit_file",
      "Bash(/home/anthony/Github/market-parser-polygon-mcp/docs/MCP_TESTING_USAGE_GUIDE.md)",
      "Bash(source .env)",
      "Bash(markdownlint-cli2-fix:*)",
      "Bash(PYTHONPATH=/home/1000211866/Github/market-parser-polygon-mcp/gpt5-openai-agents-sdk-polygon-mcp/src python3 -c \"from main import app; print(''FastAPI app imported successfully'')\")",
      "Bash(tree:*)",
      "Bash(PYTHONPATH=. uv run python -m pytest --version)",
      "Bash(PYTHONPATH=. uv run python test_api.py)",
      "Bash(PYTHONPATH=. uv run python -m pytest test_pytest.py -v)",
      "Read(//tmp/**)",
      "Bash(PYTHONPATH=. uv run python -m pytest --collect-only)",
      "Bash(PYTHONPATH=. uv run python -m pytest test_pytest.py -v --tb=line)",
      "Bash(pylint:*)",
      "Bash(source:*)",
      "mcp__github__get_me",
      "mcp__github__list_branches",
      "mcp__github__get_file_contents",
      "mcp__github__list_commits",
      "mcp__github__get_commit",
      "mcp__github__list_secret_scanning_alerts",
      "mcp__github__list_tags",
      "mcp__github__get_tag",
      "mcp__github__list_releases",
      "mcp__github__push_files",
      "Bash(NODE_ENV=production npm run build)",
      "Bash(time npm run dev)",
      "mcp__filesystem__list_directory_with_sizes",
      "Bash(convert:*)",
      "mcp__github__delete_file",
      "WebFetch(domain:localhost)",
      "Bash(live-server:*)",
      "WebFetch(domain:127.0.0.1)",
      "Bash(time curl:*)",
      "mcp__filesystem__read_media_file",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_close",
      "Bash(netstat:*)",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_network_requests",
      "mcp__playwright__browser_resize",
      "mcp__filesystem__read_file",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_evaluate",
      "Bash(TZ:*)",
      "Bash(break)",
      "Bash(continue)",
      "Bash(done)",
      "mcp__playwright__browser_console_messages",
      "Bash(lsof:*)",
      "Bash(HEALTH_STATUS=\"PASSED\")",
      "Bash(HEALTH_STATUS=\"FAILED\")",
      "Bash(fi)",
      "Bash(exit 1)",
      "Bash(xargs -r kill -9)",
      "Bash(uvx:*)",
      "Bash(PLAYWRIGHT_BASE_URL=http://localhost:3000 npx playwright test --timeout=120000 --workers=1 test-b006-empty-message.spec.ts)",
      "Read(//home/1000211866/.claude/**)",
      "Bash(bash:*)",
      "Bash(xargs kill:*)",
      "mcp__playwright__browser_take_screenshot",
      "Bash(markdownlint-cli2:*)",
      "Bash(PLAYWRIGHT_BASE_URL=http://localhost:3000 npx playwright test --timeout=120000 --workers=1 test-b001-market-status.spec.ts)",
      "Bash(xargs:*)",
      "Bash(./start-app.sh:*)",
      "Bash(./start-app-xterm.sh:*)",
      "mcp__serena__list_dir",
      "mcp__serena__find_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__list_memories",
      "mcp__serena__write_memory",
      "mcp__serena__read_memory",
      "mcp__serena__delete_memory",
      "mcp__serena__find_symbol",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__find_referencing_symbols",
      "Read(//home/anthony/**)",
      "Bash(curl:*)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(bun install:*)",
      "Bash(export:*)",
      "Bash(ccstatusline:*)",
      "Bash(/home/anthony/snap/bun-js/77/.bun/bin/ccstatusline --help)",
      "Bash(bunx:*)",
      "Bash(bun x:*)",
      "Bash(/home/anthony/snap/bun-js/77/.bun/bin/ccstatusline)",
      "mcp__docs-ccstatusline__fetch_ccstatusline_documentation",
      "mcp__docs-ccstatusline__search_ccstatusline_documentation",
      "Bash(pkill:*)",
      "Bash(uv:*)",
      "Bash(node:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(chmod:*)",
      "Bash(./test_7_prompts_comprehensive.sh:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\n[RE-INIT] Complete project environment re-initialization\n\n- Successfully re-initialized Python environment (119 packages)\n- Successfully re-initialized Node.js environment (1212 packages)\n- All 7/7 comprehensive CLI tests passing (100% success rate)\n- Average response time: 6.08s (EXCELLENT performance)\n- Backend and frontend servers validated and operational\n- Test report generated: comprehensive_7_prompts_test_20251004_131126.txt\n- Serena memory added: SERNENA_PROJECT_ENVIRONMENT_SETUP_GUIDE.md\n- Removed obsolete dev-dist workbox files\n- Updated package-lock.json with fresh dependencies\n\nEnvironment Status:\nâœ… Python 3.12.3 with uv 0.8.19\nâœ… Node.js v24.6.0 with npm 11.6.0\nâœ… All imports verified and working\nâœ… Production build successful (3.65s)\nâœ… Backend health check passing\nâœ… Frontend serving correctly\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push:*)",
      "mcp__docs-serena__fetch_serena_documentation",
      "mcp__serena__initial_instructions",
      "mcp__serena__get_current_config",
      "Bash(test:*)",
      "Bash(pgrep:*)",
      "mcp__docs-serena__search_serena_documentation",
      "Bash(git log:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\n[SERENA] Complete Serena onboarding with comprehensive memory files\n\n- Create 5 comprehensive Serena memory files (53KB total documentation)\n  - suggested_commands.md: All development commands and utilities\n  - code_style_conventions.md: Python and TypeScript style guidelines\n  - task_completion_checklist.md: Pre-commit validation checklist\n  - project_architecture.md: Detailed architecture and data flows\n  - tech_stack.md: Complete technology stack documentation\n- Index 24 Python files for accelerated symbol operations (304KB cache)\n- Update Claude settings for Serena integration\n- Document project purpose, tech stack, development workflows\n- Establish code quality standards (10.00/10 Python, 0 errors JS/TS)\n- Define GPT-5-Nano only policy and conventions\n- Create comprehensive onboarding for future AI agent interactions\n\nSerena Status:\nâœ… Full onboarding complete\nâœ… 6 total memory files (68KB)\nâœ… Symbol indexing complete (24 files, 72.26 files/sec)\nâœ… All 24 Serena tools tested and operational\nâœ… Project architecture documented\nâœ… Development commands catalogued\nâœ… Code conventions established\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git reset:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\n[SERENA] Complete Serena onboarding with comprehensive memory files\n\n- Create 5 comprehensive Serena memory files (53KB total documentation)\n  - suggested_commands.md: All development commands and utilities\n  - code_style_conventions.md: Python and TypeScript style guidelines\n  - task_completion_checklist.md: Pre-commit validation checklist\n  - project_architecture.md: Detailed architecture and data flows\n  - tech_stack.md: Complete technology stack documentation\n- Index 24 Python files for accelerated symbol operations (304KB cache)\n- Add symbol cache: .serena/cache/python/document_symbols_cache_v23-06-25.pkl\n- Update Claude settings for Serena integration\n- Document project purpose, tech stack, development workflows\n- Establish code quality standards (10.00/10 Python, 0 errors JS/TS)\n- Define GPT-5-Nano only policy and conventions\n- Create comprehensive onboarding for future AI agent interactions\n\nSerena Status:\nâœ… Full onboarding complete\nâœ… 6 total memory files (68KB)\nâœ… Symbol indexing complete (24 files, 72.26 files/sec)\nâœ… All 24 Serena tools tested and operational\nâœ… Project architecture documented\nâœ… Development commands catalogued\nâœ… Code conventions established\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(./test_7_prompts_persistent_session.sh:*)",
      "mcp__serena__think_about_task_adherence",
      "Bash(npm run lint:fix:*)",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__summarize_changes"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/home/anthony/.claude"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "sequential-thinking",
    "filesystem",
    "context7",
    "github"
  ]
}