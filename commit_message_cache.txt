feat: Implement Dynamic Adaptive Prompting System (Phases 1-5)

Implement comprehensive dynamic prompting system with user customization,
security features, and performance optimization for financial analysis.

## Core Implementation (Phase 1-2)
- Add DynamicPromptManager with instruction parsing and template engine
- Implement InstructionParser for extracting user preferences from input
- Add TemplateEngine with variable substitution and customization
- Create InputValidator with security validation and sanitization
- Implement PromptCache with LRU caching for performance

## Integration & Advanced Features (Phase 3-4)
- Integrate with existing CLI and GUI systems via dynamic_prompt_integration.py
- Preserve existing button prompt functionality (DirectPromptManager unchanged)
- Add advanced prompting features with custom templates and learning system
- Implement performance monitoring and analytics capabilities
- Add MarketParserDynamicPromptManager for financial analysis context

## Security & Resilience (Phase 5)
- Implement comprehensive security features with rate limiting
- Add EnhancedInputValidator with threat detection and pattern matching
- Create SecurityManager with audit logging and circuit breaker patterns
- Implement SecureDynamicPromptManager with full security integration
- Add IP whitelisting and comprehensive input validation

## Files Added/Modified
- src/backend/dynamic_prompts.py: Core dynamic prompting system
- src/backend/dynamic_prompt_manager.py: Market-specific prompt manager
- src/backend/dynamic_prompt_integration.py: Integration layer
- src/backend/advanced_prompting_features.py: Advanced features
- src/backend/security_features.py: Security implementation
- src/backend/secure_prompt_manager.py: Secure prompt manager
- src/backend/main.py: Integration with existing system
- tests/test_dynamic_prompting_system.py: Comprehensive test suite
- docs/dynamic_prompting_system_usage.md: Usage documentation
- .serena/memories/: Implementation documentation and guides

## Technical Features
- User preference parsing: [verbose], [minimal tools], [structured], [formal]
- Template engine with variable substitution and customization
- LRU caching with configurable TTL and size limits
- Rate limiting with sliding window algorithm
- Input validation with threat detection and sanitization
- Audit logging with security event tracking
- Circuit breaker pattern for system resilience
- Performance monitoring and analytics

## Backward Compatibility
- Maintains existing DirectPromptManager for button prompts
- Preserves all existing API endpoints and functionality
- Fallback mechanisms for error handling and system resilience
- No breaking changes to existing user workflows

## Security Enhancements
- Comprehensive input validation and sanitization
- Rate limiting with configurable rules and IP tracking
- Threat detection with pattern matching and keyword analysis
- Audit logging with security event classification
- Circuit breaker for system protection and recovery

This implementation provides a robust, secure, and performant dynamic
prompting system while maintaining full backward compatibility.