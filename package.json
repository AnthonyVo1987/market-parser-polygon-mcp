{
  "name": "market-parser-polygon-mcp",
  "version": "1.0.0",
  "description": "Market Parser - Python CLI and React frontend for financial queries using Polygon.io MCP server and OpenAI GPT-5-mini",
  "private": true,
  "type": "module",
  "scripts": {
    "// === DEVELOPMENT COMMANDS ===": "",
    "dev": "concurrently \"npm run backend:dev\" \"npm run frontend:dev\"",
    "start": "npm run dev",
    "dev:full": "concurrently \"npm run backend:server\" \"npm run frontend:dev\"",
    "dev:frontend": "npm run frontend:dev",
    "dev:backend": "npm run backend:dev",

    "// === BACKEND COMMANDS ===": "",
    "backend:dev": "uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload",
    "backend:server": "uv run src/main.py --server",
    "backend:cli": "uv run src/main.py",
    "backend:install": "uv install",

    "// === FRONTEND COMMANDS ===": "",
    "frontend:install": "cd frontend && npm install",
    "frontend:dev": "cd frontend && npm run dev",
    "frontend:dev:staging": "cd frontend && npm run dev:staging",
    "frontend:dev:production": "cd frontend && npm run dev:production",
    "frontend:build": "cd frontend && npm run build",
    "frontend:build:staging": "cd frontend && npm run build:staging",
    "frontend:build:development": "cd frontend && npm run build:development",
    "frontend:preview": "cd frontend && npm run preview",

    "// === CODE QUALITY COMMANDS ===": "",
    "lint": "npm run lint:js",
    "lint:js": "cd frontend && npm run lint",
    "lint:fix": "cd frontend && npm run lint:fix",
    "format": "npm run format:js",
    "format:js": "cd frontend && npm run format",
    "format:check": "cd frontend && npm run format:check",
    "type-check": "cd frontend && npm run type-check",
    "check:all": "npm run lint && npm run format:check && npm run type-check",

    "// === BUILD & ANALYSIS COMMANDS ===": "",
    "build": "npm run frontend:build",
    "build:all": "npm run frontend:build",
    "build:dev": "npm run frontend:build:development",
    "build:staging": "npm run frontend:build:staging",
    "analyze": "cd frontend && npm run analyze",
    "analyze:visualizer": "cd frontend && npm run analyze:visualizer",
    "analyze:staging": "cd frontend && npm run analyze:staging",
    "analyze:development": "cd frontend && npm run analyze:development",

    "// === TESTING COMMANDS ===": "",
    "test": "npm run test:playwright",
    "test:playwright": "cd tests/playwright && npx playwright test",
    "test:playwright:headed": "cd tests/playwright && npx playwright test --headed",
    "test:playwright:debug": "cd tests/playwright && npx playwright test --debug",
    "test:playwright:ui": "cd tests/playwright && npx playwright test --ui",
    "test:pwa": "cd frontend && npm run test:pwa",
    "test:pwa:staging": "cd frontend && npm run test:pwa:staging",
    "test:pwa:production": "cd frontend && npm run test:pwa:production",

    "// === PERFORMANCE & LIGHTHOUSE ===": "",
    "lighthouse": "cd frontend && npm run lighthouse",
    "lighthouse:collect": "cd frontend && npm run lighthouse:collect",
    "lighthouse:assert": "cd frontend && npm run lighthouse:assert",
    "lighthouse:upload": "cd frontend && npm run lighthouse:upload",
    "lighthouse:live-server": "cd frontend && npm run lighthouse:live-server",
    "lighthouse:live-server:staging": "cd frontend && npm run lighthouse:live-server:staging",

    "// === SERVING COMMANDS ===": "",
    "serve": "cd frontend && npm run serve",
    "serve:staging": "cd frontend && npm run serve:staging",
    "serve:production": "cd frontend && npm run serve:production",

    "// === CROSS-DEVICE & NETWORK TESTING ===": "",
    "cross-device:setup": "cd frontend && npm run cross-device:setup",
    "cross-device:staging": "cd frontend && npm run cross-device:staging",
    "live-server:help": "cd frontend && npm run live-server:help",

    "// === INSTALLATION & MAINTENANCE ===": "",
    "install:all": "npm install && npm run frontend:install",
    "install:backend": "npm run backend:install",
    "install:frontend": "npm run frontend:install",
    "clean": "rm -rf node_modules frontend/node_modules frontend/dist test-results",
    "clean:cache": "rm -rf .cache frontend/.cache node_modules/.cache",
    "clean:install": "npm run clean && npm run install:all",
    "clean:full": "npm run clean && npm run clean:cache && npm run install:all",

    "// === UTILITY COMMANDS ===": "",
    "status": "echo '=== Backend Status ===' && (curl -s http://localhost:8000/health || echo 'Backend not running') && echo && echo '=== Frontend Status ===' && (curl -s http://localhost:3000 > /dev/null && echo 'Frontend running on http://localhost:3000' || echo 'Frontend not running')",
    "health": "npm run status",
    "reset": "npm run clean:full && npm run dev",

    "// === INTERNAL HOOKS ===": "",
    "postinstall": "npm run frontend:install"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.0"
  },
  "devDependencies": {
    "@lhci/cli": "^0.15.0",
    "@playwright/test": "^1.55.0",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@typescript-eslint/eslint-plugin": "^7.2.0",
    "@typescript-eslint/parser": "^7.2.0",
    "@vitejs/plugin-react": "^4.2.1",
    "concurrently": "^8.2.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.28.0",
    "eslint-plugin-react": "^7.33.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "eslint-plugin-unused-imports": "^3.0.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.0.0",
    "rollup-plugin-visualizer": "^5.14.0",
    "terser": "^5.44.0",
    "typescript": "^5.2.2",
    "typescript-eslint": "^7.2.0",
    "vite": "^5.2.0",
    "vite-plugin-pwa": "^1.0.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/market-parser-polygon-mcp.git"
  },
  "keywords": [
    "financial-analysis",
    "polygon-io",
    "openai",
    "react",
    "fastapi",
    "mcp-server",
    "stock-market",
    "cli",
    "web-gui"
  ],
  "author": "Market Parser Team",
  "license": "MIT"
}
