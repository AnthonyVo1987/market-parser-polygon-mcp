{
  "name": "market-parser-polygon-mcp",
  "version": "1.0.0",
  "description": "Market Parser - Python CLI and React frontend for financial queries using Polygon.io MCP server and OpenAI GPT-5-mini",
  "private": true,
  "type": "module",
  "scripts": {
    "// === DEVELOPMENT COMMANDS ===": "",
    "dev": "concurrently \"npm run backend:dev\" \"npm run frontend:dev\"",
    "start": "npm run dev",
    "dev:full": "concurrently \"npm run backend:server\" \"npm run frontend:dev\"",
    "dev:frontend": "npm run frontend:dev",
    "dev:backend": "npm run backend:dev",
    "// === BACKEND COMMANDS ===": "",
    "backend:dev": "uv run uvicorn src.backend.main:app --host 127.0.0.1 --port 8000 --reload",
    "backend:server": "uv run -m src.backend.main --server",
    "backend:cli": "uv run -m src.backend.main",
    "backend:install": "uv install",
    "// === FRONTEND COMMANDS ===": "",
    "frontend:dev": "vite --mode development",
    "frontend:dev:staging": "vite --mode staging",
    "frontend:dev:production": "vite --mode production",
    "frontend:build": "tsc && vite build --mode production",
    "frontend:build:staging": "tsc && vite build --mode staging",
    "frontend:build:development": "tsc && vite build --mode development",
    "frontend:preview": "vite preview",
    "// === CODE QUALITY COMMANDS ===": "",
    "lint": "npm run lint:all",
    "lint:all": "npm run lint:python && npm run lint:js",
    "lint:python": "uv run pylint src/backend/ tests/",
    "lint:js": "eslint 'src/frontend/**/*.{ts,tsx}' --report-unused-disable-directives --max-warnings 150",
    "lint:fix": "npm run lint:fix:python && npm run lint:fix:js",
    "lint:fix:python": "uv run black src/backend/ tests/ --line-length 100 && uv run isort src/backend/ tests/ --profile black --line-length 100",
    "lint:fix:js": "eslint 'src/frontend/**/*.{ts,tsx}' --fix",
    "format": "npm run format:js",
    "format:js": "prettier --write 'src/frontend/**/*.{ts,tsx,js,jsx,json,css,md}'",
    "format:check": "prettier --check 'src/frontend/**/*.{ts,tsx,js,jsx,json,css,md}'",
    "type-check": "tsc --noEmit",
    "check:all": "npm run lint && npm run format:check && npm run type-check",
    "// === BUILD & ANALYSIS COMMANDS ===": "",
    "build": "npm run frontend:build",
    "build:all": "npm run frontend:build",
    "build:dev": "npm run frontend:build:development",
    "build:staging": "npm run frontend:build:staging",
    "analyze": "npm run build && npx vite-bundle-analyzer dist",
    "analyze:visualizer": "ANALYZE=true npm run build",
    "analyze:staging": "ANALYZE=true npm run build:staging",
    "analyze:development": "ANALYZE=true npm run build:development",
    "// === CSS OPTIMIZATION COMMANDS ===": "",
    "css:optimize": "postcss src/frontend/index.css -o dist/index.optimized.css",
    "css:minify": "postcss src/frontend/index.css -o dist/index.min.css --env production",
    "css:analyze": "postcss src/frontend/index.css -o dist/index.analyzed.css --env analysis",
    "test:pwa": "npm run build:development && echo '\n🔧 Development PWA build ready!\n📱 To test PWA functionality:\n   1. Start Live Server on port 5500\n   2. Open DevTools > Application > Service Workers\n   3. Test offline functionality and PWA install prompt\n✅ Service worker and manifest configured\n'",
    "test:pwa:staging": "npm run build:staging && echo '\n🔧 Staging PWA build ready!\n📱 To test PWA functionality:\n   1. Use staging Live Server config (port 5501)\n   2. Open DevTools > Application > Service Workers\n   3. Test offline functionality and PWA install prompt\n✅ Service worker and manifest configured for staging\n'",
    "test:pwa:production": "npm run build && echo '\n🔧 Production PWA build ready!\n📱 To test PWA functionality:\n   1. Use production Live Server config (port 5502)\n   2. Open DevTools > Application > Service Workers\n   3. Test offline functionality and PWA install prompt\n✅ Service worker and manifest configured for production\n'",
    "// === PERFORMANCE & LIGHTHOUSE ===": "",
    "lighthouse": "npm run build && npx @lhci/cli@0.15.x autorun",
    "lighthouse:collect": "npm run build && npx @lhci/cli@0.15.x collect",
    "lighthouse:assert": "npx @lhci/cli@0.15.x assert",
    "lighthouse:upload": "npx @lhci/cli@0.15.x upload",
    "lighthouse:live-server": "npm run build && echo '\n🏗️ Production build complete for Lighthouse testing!\n⚡ To run Lighthouse CI:\n   1. Start Live Server on port 5502\n   2. Run: npx @lhci/cli@0.15.x autorun --config=lighthouserc.js\n📊 Performance, PWA, and accessibility will be tested\n'",
    "lighthouse:live-server:staging": "npm run build:staging && echo '\n🏗️ Staging build complete for Lighthouse testing!\n⚡ To run Lighthouse CI:\n   1. Start Live Server on port 5501\n   2. Run: npx @lhci/cli@0.15.x autorun --config=lighthouserc.js\n📊 Performance, PWA, and accessibility will be tested\n'",
    "// === PERFORMANCE MONITORING ===": "",
    "perf:scan": "react-scan http://localhost:3000",
    "perf:bundle": "npm run build && source-map-explorer 'dist/assets/*.js'",
    "perf:lighthouse": "npm run lighthouse",
    "perf:all": "npm run perf:scan && npm run perf:bundle && npm run perf:lighthouse",
    "// === PHASE 4: ENVIRONMENT-SPECIFIC TESTING ===": "",
    "test:perf:dev": "npm run frontend:build:development && npm run lighthouse:live-server:staging",
    "test:perf:staging": "npm run frontend:build:staging && npm run lighthouse:live-server:staging",
    "test:perf:prod": "npm run frontend:build && npm run lighthouse:live-server",
    "test:perf:all": "npm run test:perf:dev && npm run test:perf:staging && npm run test:perf:prod",
    "// === SERVING COMMANDS ===": "",
    "serve": "npm run build:development && echo '\n📦 Development build complete!\n🚀 To test: Open VS Code Command Palette (Ctrl+Shift+P) and run:\n   > Live Server: Open with Live Server\n🌐 Will serve on http://localhost:5500 from dist/ folder\n✅ SPA routing and PWA features enabled\n'",
    "serve:staging": "npm run build:staging && echo '\n📦 Staging build complete!\n🚀 To test with staging config:\n   1. Copy .vscode/live-server-staging.json settings to .vscode/settings.json\n   2. Run Live Server (will use port 5501)\n🌐 Will serve on http://localhost:5501 from dist/ folder\n✅ Staging API endpoints and PWA features enabled\n'",
    "serve:production": "npm run build && echo '\n📦 Production build complete!\n🚀 To test with production config:\n   1. Copy .vscode/live-server-production.json settings to .vscode/settings.json\n   2. Run Live Server (will use port 5502)\n🌐 Will serve on http://localhost:5502 from dist/ folder\n✅ Production API endpoints and PWA features enabled\n'",
    "// === CROSS-DEVICE & NETWORK TESTING ===": "",
    "cross-device:setup": "npm run build && echo '\n📱 Production build ready for cross-device testing!\n🌐 Network access enabled - find your local IP:\n   • Windows: ipconfig | Mac/Linux: ifconfig\n   • Access via http://YOUR_LOCAL_IP:5502\n✅ CORS enabled for mobile device testing\n'",
    "cross-device:staging": "npm run build:staging && echo '\n📱 Staging build ready for cross-device testing!\n🌐 Network access enabled - find your local IP:\n   • Windows: ipconfig | Mac/Linux: ifconfig\n   • Access via http://YOUR_LOCAL_IP:5501\n✅ CORS enabled for mobile device testing\n'",
    "live-server:help": "echo '\n🔧 Live Server Configuration Help:\n\n📁 Available configurations:\n   • .vscode/settings.json (default dev - port 5500)\n   • .vscode/live-server-staging.json (staging - port 5501)\n   • .vscode/live-server-production.json (production - port 5502)\n\n🚀 Quick Start:\n   1. npm run serve (builds + instructions)\n   2. Open VS Code Command Palette (Ctrl+Shift+P)\n   3. Run: Live Server: Open with Live Server\n\n✅ Features enabled:\n   • SPA routing (React Router support)\n   • PWA functionality (service worker + manifest)\n   • CORS for cross-device testing\n   • API proxy to localhost:8000\n\n📱 Testing on mobile:\n   1. npm run cross-device:setup\n   2. Connect mobile device to same network\n   3. Access via your computer IP address\n'",
    "// === INSTALLATION & MAINTENANCE ===": "",
    "install:all": "npm install",
    "install:backend": "npm run backend:install",
    "clean": "rm -rf node_modules dist test-results",
    "clean:cache": "rm -rf .cache node_modules/.cache",
    "clean:install": "npm run clean && npm run install:all",
    "clean:full": "npm run clean && npm run clean:cache && npm run install:all",
    "// === ONE-CLICK STARTUP COMMANDS ===": "",
    "start:app": "bash ./start-app.sh",
    "start:app:xterm": "bash ./start-app-xterm.sh",
    "// === UTILITY COMMANDS ===": "",
    "status": "echo '=== Backend Status ===' && (curl -s http://localhost:8000/health || echo 'Backend not running') && echo && echo '=== Frontend Status ===' && (curl -s http://localhost:3000 > /dev/null && echo 'Frontend running on http://localhost:3000' || echo 'Frontend not running')",
    "health": "npm run status",
    "reset": "npm run clean:full && npm run dev"
  },
  "dependencies": {
    "@playwright/test": "^1.55.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.0",
    "react-scan": "^0.4.3",
    "use-debounce": "^10.0.6"
  },
  "devDependencies": {
    "@lhci/cli": "^0.15.0",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@typescript-eslint/eslint-plugin": "^7.2.0",
    "@typescript-eslint/parser": "^7.2.0",
    "@vitejs/plugin-react": "^4.2.1",
    "@welldone-software/why-did-you-render": "^10.0.1",
    "concurrently": "^8.2.0",
    "cssnano": "^7.1.1",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.28.0",
    "eslint-plugin-react": "^7.33.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "eslint-plugin-unused-imports": "^3.0.0",
    "lightningcss": "^1.30.1",
    "markdownlint-cli": "^0.45.0",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.5.6",
    "postcss-cli": "^11.0.1",
    "prettier": "^3.0.0",
    "rollup-plugin-visualizer": "^5.14.0",
    "source-map-explorer": "^2.5.3",
    "terser": "^5.44.0",
    "typescript": "^5.2.2",
    "typescript-eslint": "^7.2.0",
    "vite": "^5.2.0",
    "vite-plugin-pwa": "^1.0.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/market-parser-polygon-mcp.git"
  },
  "keywords": [
    "financial-analysis",
    "polygon-io",
    "openai",
    "react",
    "fastapi",
    "mcp-server",
    "stock-market",
    "cli",
    "web-gui"
  ],
  "author": "Market Parser Team",
  "license": "MIT"
}